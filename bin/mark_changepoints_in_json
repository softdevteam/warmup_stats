#!/usr/bin/env python

"""
Annotate changepoints and classification information into a Krun JSON file.
"""

import os
import sys

# R packages are stored relative to the top-level of the repo.
our_rlibs = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'work', 'rlibs')
if not os.path.exists(our_rlibs):
    sys.stderr.write("Please run build.sh first.\n")
    sys.exit(0)
if our_rlibs not in os.environ.get('R_LIBS_USER', ''):
    if 'R_LIBS_USER' in os.environ:
        os.environ['R_LIBS_USER'] = "%s:%s" % (os.environ['R_LIBS_USER'], our_rlibs)
    else:
        os.environ['R_LIBS_USER'] = our_rlibs
    args = [sys.executable]
    args.extend(sys.argv)
    os.execv(sys.executable, args)

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from warmup.krun_results import read_krun_results_file, write_krun_results_file
from warmup.statistics import get_absolute_delta_using_fastest_seg

# We use a custom install of rpy2, relative to the top-level of the repo.
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                                'work', 'pylibs'))

import argparse
import numpy
import rpy2
import rpy2.interactive.packages
import rpy2.robjects
from rpy2.rinterface import R_VERSION_BUILD


class Segment(object):
    """A single segment between two changepoints.
    """

    def __init__(self, start, end, mean, variance, data, outliers):
        self.start = start
        self.end = end
        self.mean = mean
        self.variance = variance
        self.data = data

    @property
    def n(self):
        return self.end - self.start


class Segments(object):
    """A list of Segments for a whole run sequence.
    """

    def __init__(self, delta, steady_state, length, cpts, means, variances,
                 data, outliers, raw_deltas):
        self.delta = delta
        # When True, the variance not used when finding "equivalent" segments.
        self.raw_deltas = raw_deltas
        self.steady_state = steady_state
        self.length = length  # Length of original data with outliers.
        assert self.length == len(data)
        self.data = data
        self.outliers = outliers
        self.segments = list()
        assert len(means) == len(variances) == len(cpts)
        if len(means) == 1:  # No changepoints.
            segment = Segment(0, self.length - 1, means[0], variances[0], data,
                              outliers)
            self.segments.append(segment)
        else:
            for index in xrange(len(means)):
                segment = None
                if index == 0:
                    s_out = [out for out in outliers if out <= cpts[index]]
                    segment = Segment(0, cpts[index], means[index],
                                  variances[index], data[:cpts[index]+1], s_out)
                else:
                    s_out = list()
                    for out in outliers:
                         if out > (cpts[index - 1]) and out <= cpts[index]:
                             s_out.append(out - cpts[index - 1] - 1)
                    segment = Segment(cpts[index - 1], cpts[index],
                                  means[index], variances[index],
                                  data[cpts[index - 1]+1:cpts[index]+1], s_out)
                self.segments.append(segment)
        assert cpts[:-1] == [s.end for s in self.segments][:-1]

    @property
    def means(self):
        return [segment.mean for segment in self.segments]

    @property
    def variances(self):
        return [segment.variance for segment in self.segments]

    @property
    def changepoints(self):
        """Return all changepoints.
        The last location in the data is always a changepoint, so we ignore it.
        """
        if len(self.segments) == 1:
            return list()
        return [segment.end for segment in self.segments][:-1]

    def get_classification(self):
        """Return a classification for this run sequence."""
        last_segment = self.segments[-1]
        delta = get_absolute_delta_using_fastest_seg(
            self.delta, [s.mean for s in self.segments])

        if self.raw_deltas:
            lower_bound = last_segment.mean - delta
            upper_bound = last_segment.mean + delta
        else:
            lower_bound = min(last_segment.mean - last_segment.variance,
                              last_segment.mean - delta)
            upper_bound = max(last_segment.mean + last_segment.variance,
                              last_segment.mean + delta)

        classification = 'flat'
        for index in xrange(len(self.segments) - 2, -1, -1):
            current_segment = self.segments[index]
            if (current_segment.mean + current_segment.variance >= lower_bound and
                    current_segment.mean - current_segment.variance <= upper_bound):
                continue
            elif current_segment.end > (self.length - self.steady_state):
                classification = 'no steady state'
                break
            elif current_segment.mean - current_segment.variance < lower_bound:
                classification = 'slowdown'
                break
            assert current_segment.mean + current_segment.variance > upper_bound
            classification = 'warmup'
        return classification


def main(in_files, delta, steady_state, raw_deltas):
    cpt = rpy2.interactive.packages.importr('changepoint')
    r_version = '.'.join(R_VERSION_BUILD[:2])
    print 'Using R version %s and changepoint library %s' % (r_version, cpt.__version__)
    assert cpt.__version__ >= '2.2.2', 'Please update the changepoint library.'
    assert r_version >= '3.3.1', 'Please update R from CRAN.'
    krun_data = dict()
    for filename in in_files:
        assert os.path.exists(filename), 'File %s does not exist.' % filename
        print 'Loading: %s' % filename
        krun_data[filename] = read_krun_results_file(filename)
    for filename in krun_data:
        changepoints = dict()
        classifications = dict()
        changepoint_means = dict()
        changepoint_vars = dict()
        rm_outliers = 'all_outliers' in krun_data[filename]
        if not rm_outliers:
            print ('No all_outliers key in %s; please run '
                   './bin/mark_outliers_in_json on your data if you want this '
                   'analysis to exclude outliers.'% filename)
        for bench in sorted(krun_data[filename]['wallclock_times']):
            changepoints[bench] = list()
            classifications[bench] = list()
            changepoint_means[bench] = list()
            changepoint_vars[bench] = list()
            for index, p_exec in enumerate(krun_data[filename]['wallclock_times'][bench]):
                if rm_outliers:
                    outliers = krun_data[filename]['all_outliers'][bench][index]
                else:
                    outliers = list()
                segments = get_segments(cpt, delta, steady_state, p_exec, outliers, raw_deltas)
                changepoints[bench].append(segments.changepoints)
                changepoint_means[bench].append(segments.means)
                changepoint_vars[bench].append(segments.variances)
                try:
                    classifications[bench].append(segments.get_classification())
                except ValueError:
                    print 'Could not classify %s execution %d' % (bench, index + 1)
                    sys.exit(1)
        krun_data[filename]['changepoints'] = changepoints
        krun_data[filename]['changepoint_means'] = changepoint_means
        krun_data[filename]['changepoint_vars'] = changepoint_vars
        krun_data[filename]['classifications'] = classifications
        krun_data[filename]['classifier'] = { 'delta':delta, 'steady':steady_state }
        new_filename = create_output_filename(filename)
        print 'Writing out: %s' % new_filename
        write_krun_results_file(krun_data[filename], new_filename)


def get_segments(cpt, delta, steady_state, data, outliers, raw_deltas):
    p_exec = data[:]  # data will be passed to Segments unchanged.
    length = len(p_exec)  # Will change when we remove outliers.
    indices = sorted(outliers, reverse=True)
    for index in indices:
        del p_exec[index]
    measurements = rpy2.robjects.FloatVector(p_exec)
    changepoints = cpt.cpt_meanvar(measurements, method='PELT', penalty='Manual',
                                   pen_value=15.0*numpy.log(len(p_exec)))
    # List indices in R start at 1.
    c_points = [int(cpoint - 1) for cpoint in changepoints.slots['cpts']]
    # If outliers were deleted, the index of each changepoint will have moved.
    # Here, we adjust the indices to match the original data.
    for outlier in outliers:
        for index in xrange(len(c_points)):
            if c_points[index] >= outlier:
                c_points[index] += 1
    # Variances is a list of variances for each data segment between changepoints.
    means, variances = list(), list()
    for mean in changepoints.slots['param.est'][changepoints.slots['param.est'].names.index('mean')]:
        means.append(float(mean))
    for var_ in changepoints.slots['param.est'][changepoints.slots['param.est'].names.index('variance')]:
        variances.append(float(var_))
    return Segments(delta, steady_state, length, c_points, means, variances, data, outliers, raw_deltas)


def create_output_filename(in_file_name):
    directory = os.path.dirname(in_file_name)
    basename = os.path.basename(in_file_name)
    if basename.endswith('.json.bz2'):
        root_name = basename[:-9]
    else:
        root_name = os.path.splitext(basename)[0]
    base_out = root_name + '_changepoints.json.bz2'
    return os.path.join(directory, base_out)


def create_cli_parser():
    """Create a parser to deal with command line switches.
    """
    script = os.path.basename(__file__)
    description = ("""Write changepoints and classifications into Krun results
file(s). If you want outliers to be excluded from the changepoint calculations,
you should first run your data through the ./bin/mark_outliers_in_json script.

This script does not alter your original Krun results file. Instead it writes
out a new file, with _changepoints added to the filename. For example if the
input file is:

    results_outliers_w200.json.bz2

the output of this script will be a new file named:

    results_outliers_w200_changepoints.json.bz2.

Example usage:
    $ python %s results1.json.bz2
    $ python %s  --steady 500 results1.json.bz2 results2.json.bz2\n""" % (script, script))
    parser = argparse.ArgumentParser(description)
    parser.add_argument('json_files', nargs='+', action='append', default=[],
                        type=str, help='One or more Krun result files.')
    parser.add_argument('--steady', '-s', action='store', dest='steady_state',
                        default=500, type=int, metavar='N',
                        help=('Expect a steady state should be reached before '
                              'the last N iterations.'))
    parser.add_argument('--delta', '-d', action='store', dest='delta',
                        default='0.001', type=str, metavar='D',
                        help=('Segments must differ by more than Ds from the '
                              'last (steady state) segment in order to be '
                              'considered a warmup or slowdown. This can be '
                              'an absolute number of seconds, or (if '
                              'suffixed with `%%`) a percentage of the '
                              'final segment. Note that unless `--raw-deltas` '
                              'is passed, the variance is also used in delta '
                              'computations.'))
    parser.add_argument('--raw-deltas', '-r', action='store_true', dest='raw_deltas',
                        default=False, help=(
                            'Do not use the variance when computing '
                            'equivalent segments'))
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    print ('Marking changepoints and classifications.\nExpecting a steady state to '
           'be reached before the last %d iterations.\nUsing a delta of %s.' %
           (options.steady_state, options.delta))
    main(options.json_files[0], options.delta, options.steady_state, options.raw_deltas)
